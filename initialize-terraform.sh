#!/bin/bash

####################################################################################
# title:        initialize-terraform.sh
# author:       vasco.antunes.silva@gmail.com
# Description:  This shell script deploys the initial configuration required to use terraform. 
#               It creates the following resources in GCP:
#                   - 1 Storage Bucket where terraform state will be stored.
#                   - Optional: 1 Secret Manager, with a custom list of secrets
#
# documentation resources official reference: https://cloud.google.com/docs/terraform/get-started-with-terraform
####################################################################################

####################################################################
### Variables - You should setup your environment on this block
####################################################################

projectId=""                   # Your project id
secrets_list="airflow-variables-test-var"

secrets_list=`echo $secrets_list | tr ',' ' '`
for secret in $secrets_list 
do
    echo $secret
done

####################################################################
### Script block - You shouldnt modify anything below this line.... 
####################################################################
### Script internal variables 
bucketName=$projectId+'-tfstate' 
terrafomBackendConfigFile="backend.conf"
terrafomBackendConfigPrefix="/tf-state"

gcloud auth login
echo "Setting default project: $projectId"  
gcloud config set project $projectId
# 1st access verification - Checking access to the specified account
# Causes: missing access to the subscription

echo ok
exit 0 
quit 0 

gcloud projects describe $projectId
if ( $? -eq $false ) {
    Write-Output "ERROR: Failing while accessing to GCP project. Possible causes: wrong project ID or missing permissions."
    Write-Output "FAILED: Initial Setup has been failed! Check the errors above and then try again."
    exit 1 
}

# Creating Bucket' 
Write-Output "gs://$bucketName"
gsutil mb -p $projectId "gs://$bucketName"
if ( $? -eq $false ) { # If the bucket already exists, lets check if we can access it. If yes, probably is not the first time that this script runs
    gsutil ls "gs://$bucketName"
    if ( $? -eq $false ) { # If not possible to access to the bucket, so probably the name was already used. 
        Write-Output "ERROR: Failing while Creating the Bucket: $bucketName Possible causes: missing permissions, or the bucket name was already taken (Bucket names are GCP Global!) ."
        Write-Output "FAILED: Initial Setup has been failed! Check the errors above and then try again."    
        exit 1 
    }
}

# Generate backend configuration file
Write-Output "Generating terraform backend config file: $terrafomBackendConfigFile"
$terrafomBackendConfigFileContent=@'
# This file has been auto-generated by the initial-setup script file.
# You can change this file, but, keep in mind that if you run initial-setup script file again, this file will be overwrited'
bucket      = "{0}"
prefix      = "{1}"
'@ -f $bucketName, $terrafomBackendConfigPrefix
Set-Content -Path $terrafomBackendConfigFile -Value $terrafomBackendConfigFileContent

# Necessary to initialize terraform 
gcloud auth application-default login
# Successfull message                                  
Write-Warning "Be aware that the Storage Bucket gs://$bucketName will store sensitive information! You should restrict as possible the access to this resource."
Write-Output "DONE: Initial Setup has been successfully executed! You dont need to run this script again."
Write-Output "Now you can initialize Terraform. You only need to type:"
Write-Output "##> terraform init -backend-config=""$terrafomBackendConfigFile"""  
